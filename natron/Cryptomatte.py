# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named CryptomatteExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from CryptomatteExt import *
except ImportError:
    pass

def getPluginID():
    return "com.Cryptomatte.pyplug.Cryptomatte"

def getLabel():
    return "Cryptomatte"

def getVersion():
    return 1

def getIconPath():
    return "cryptomatte_logo.png"

def getGrouping():
    return "Keyer/Cryptomatte"

def getPluginDescription():
    return "This plugin can be used to pull keys from Cryptomatte layers."

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("Cryptomatte.paramChangedCallback")
        del param

    param = lastNode.getParam("onInputChanged")
    if param is not None:
        param.setValue("Cryptomatte.inputChangedCallback")
        del param


    # Create the user parameters
    lastNode.cryptomatte = lastNode.createPageParam("cryptomatte", "Cryptomatte")
    param = lastNode.createColorParam("pickerAdd", "Picker Add", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Key objects to add to the Matte List here. ")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pickerAdd = param
    del param

    param = lastNode.createColorParam("pickerRemove", "Picker Remove", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Key objects to remove from the Matte List here. ")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.pickerRemove = param
    del param

    param = lastNode.createSeparatorParam("notUndoableWarning", "Warning: Changes made to the matte list using the pickers are not undoable. ")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Warning: Changes made to the matte list using the pickers are not undoable. ")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.notUndoableWarning = param
    del param

    param = lastNode.createSeparatorParam("unnamed0", "")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.unnamed0 = param
    del param

    param = lastNode.createBooleanParam("matteOnly", "Matte Only")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Extracted matte is copied to RGB channels as well. This disables keying. ")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.matteOnly = param
    del param

    param = lastNode.createBooleanParam("singleSelection", "Single Selection")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Picker only selects matte at a time, rather than selecting a list. ")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.singleSelection = param
    del param

    param = lastNode.createBooleanParam("removeChannels", "Remove Channels")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Removes all non-RGBA channels for the output. This will leave the downstream cleaner. ")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(True)
    lastNode.removeChannels = param
    del param

    param = lastNode.createSeparatorParam("unnamed1", "")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.unnamed1 = param
    del param

    param = lastNode.createStringParam("matteList", "Matte List")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("The list of names the mattes are built from. Color picking values with the color fields above works by populating this field. ")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.matteList = param
    del param

    param = lastNode.createButtonParam("clear", "Clear")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Clears the selection in this Gizmo")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.clear = param
    del param

    param = lastNode.createButtonParam("forceUpdate", "Force Update")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Updates the Gizmo based on which channels are available in the input. \n\nThis happens automatically when input changes, when loading the nuke script, or when a new gizmo is created. This is how it deals with differently named channels in the different Cryptomatte layers, and different depths that it\'s possible to render at. ")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.forceUpdate = param
    del param

    param = lastNode.createBooleanParam("stopAutoUpdate", "Stop Auto Update")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Stops the automatic update of this copy of the Gizmo.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.stopAutoUpdate = param
    del param

    param = lastNode.createSeparatorParam("unnamed2", "")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.unnamed2 = param
    del param

    param = lastNode.createStringParam("cryptoLayer", "Layer Selection")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("If there are multiple cryptomattes, this is how you select the layer.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.cryptoLayer = param
    del param

    param = lastNode.createBooleanParam("cryptoLayerLock", "Lock Layer Selection")

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Stops the automatic update of the layer selection.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.cryptoLayerLock = param
    del param

    param = lastNode.createStringParam("expression", "Alpha Script")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeMultiLine)

    # Add the param to the page
    lastNode.cryptomatte.addParam(param)

    # Set param properties
    param.setHelp("Contents of the SeExpr expression. This expression should output the alpha component only as a scalar. See the description of the plug-in and http://www.disneyanimation.com/technology/seexpr.html for documentation.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.expression = param
    del param

    lastNode.advanced = lastNode.createPageParam("advanced", "Advanced")
    param = lastNode.createColorParam("ColorKey", "Name Checker", True)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setMinimum(-2147483648, 3)
    param.setMaximum(2147483647, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("Key an object here to check its name. It will not effect your mattes. ")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 3)
    lastNode.ColorKey = param
    del param

    param = lastNode.createStringParam("keyedName", "Keyed Name")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("This field is for information only.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.keyedName = param
    del param

    param = lastNode.createStringParam("manifestOverride", "Manifest Override")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeMultiLine)

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("Provide an alternate manifest for looking up keyed names.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.manifestOverride = param
    del param

    param = lastNode.createSeparatorParam("unnamed3", "")

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.unnamed3 = param
    del param

    param = lastNode.createButtonParam("unloadManifest", "Unload Manifest (Extract all mattes)")

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("Create Cryptomatte gizmos for all mattes available in this pass. ")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.unloadManifest = param
    del param

    param = lastNode.createSeparatorParam("unnamed4", "")

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.unnamed4 = param
    del param

    param = lastNode.createButtonParam("forceUpdateAll", "Force Update All Gizmos in Script")

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("Forces update on all Crytomatte gizmos in the Nuke script.")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.forceUpdateAll = param
    del param

    param = lastNode.createStringParam("previewChannel", "previewChannel")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.previewChannel = param
    del param

    param = lastNode.createChoiceParam("in00", "in00")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.in00 = param
    del param

    param = lastNode.createChoiceParam("in01", "in01")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.in01 = param
    del param

    param = lastNode.createChoiceParam("in02", "in02")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.in02 = param
    del param

    param = lastNode.createChoiceParam("in03", "in03")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.in03 = param
    del param

    param = lastNode.createChoiceParam("in04", "in04")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.in04 = param
    del param

    param = lastNode.createChoiceParam("in05", "in05")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.in05 = param
    del param

    param = lastNode.createChoiceParam("in06", "in06")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.in06 = param
    del param

    param = lastNode.createChoiceParam("in07", "in07")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.advanced.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.in07 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['cryptomatte', 'advanced', 'Node'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(1146, 320)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("0")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "p1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("p1")
    lastNode.setLabel("1")
    lastNode.setPosition(1146, 170)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupp1 = lastNode

    del lastNode
    # End of node "p1"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1342, 2159)
    lastNode.setSize(104, 31)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(1191, 441)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Shuffle_in_keyable"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_in_keyable")
    lastNode.setLabel("Shuffle_in_keyable")
    lastNode.setPosition(1146, 721)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle_in_keyable = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("0")
        del param

    del lastNode
    # End of node "Shuffle_in_keyable"

    # Start of node "Shuffle3"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle3")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(1274, 1377)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle3 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle3"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(1191, 1282)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Shuffle_toAlpha"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_toAlpha")
    lastNode.setLabel("Shuffle_toAlpha")
    lastNode.setPosition(1638, 1469)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle_toAlpha = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    del lastNode
    # End of node "Shuffle_toAlpha"

    # Start of node "Switch_remove_channels"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch_remove_channels")
    lastNode.setLabel("Switch_remove_channels")
    lastNode.setPosition(1342, 1955)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch_remove_channels = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch_remove_channels"

    # Start of node "Switch_matte_only"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch_matte_only")
    lastNode.setLabel("Switch_matte_only")
    lastNode.setPosition(1342, 1786)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch_matte_only = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch_matte_only"

    # Start of node "Shuffle_Remove"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_Remove")
    lastNode.setLabel("Shuffle_Remove")
    lastNode.setPosition(1516, 1908)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle_Remove = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("B.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("B.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("B.b")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("B.a")
        del param

    del lastNode
    # End of node "Shuffle_Remove"

    # Start of node "Shuffle_visual_feedback"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle_visual_feedback")
    lastNode.setLabel("Shuffle_visual_feedback")
    lastNode.setPosition(1415, 1509)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle_visual_feedback = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.a")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("0")
        del param

    del lastNode
    # End of node "Shuffle_visual_feedback"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1272, 1628)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1683, 1634)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(1320, 1449)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(1403, 749)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Dot6_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_2")
    lastNode.setLabel("Dot6_2")
    lastNode.setPosition(1596, 749)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_2 = lastNode

    del lastNode
    # End of node "Dot6_2"

    # Start of node "Dot6_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_2_2")
    lastNode.setLabel("Dot6_2_2")
    lastNode.setPosition(1782, 749)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_2_2 = lastNode

    del lastNode
    # End of node "Dot6_2_2"

    # Start of node "Dot6_2_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_2_3")
    lastNode.setLabel("Dot6_2_3")
    lastNode.setPosition(1992, 749)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_2_3 = lastNode

    del lastNode
    # End of node "Dot6_2_3"

    # Start of node "Dot6_2_3_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_2_3_2")
    lastNode.setLabel("Dot6_2_3_2")
    lastNode.setPosition(2220, 749)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_2_3_2 = lastNode

    del lastNode
    # End of node "Dot6_2_3_2"

    # Start of node "Dot6_2_3_2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_2_3_2_2")
    lastNode.setLabel("Dot6_2_3_2_2")
    lastNode.setPosition(2462, 749)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_2_3_2_2 = lastNode

    del lastNode
    # End of node "Dot6_2_3_2_2"

    # Start of node "Dot6_2_3_2_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_2_3_2_3")
    lastNode.setLabel("Dot6_2_3_2_3")
    lastNode.setPosition(2681, 749)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_2_3_2_3 = lastNode

    del lastNode
    # End of node "Dot6_2_3_2_3"

    # Start of node "Dot6_2_3_2_3_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6_2_3_2_3_2")
    lastNode.setLabel("Dot6_2_3_2_3_2")
    lastNode.setPosition(2923, 749)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6_2_3_2_3_2 = lastNode

    del lastNode
    # End of node "Dot6_2_3_2_3_2"

    # Start of node "Multiply1"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, group)
    lastNode.setScriptName("Multiply1")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(1117, 1531)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupMultiply1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0.25, 0)
        param.setValue(0.25, 1)
        param.setValue(0, 2)
        del param

    del lastNode
    # End of node "Multiply1"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(1516, 1793)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("Size")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video 640x480")
        del param

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1919.159889221191, 0)
        param.setValue(1080, 1)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "GMICExpr_00"
    lastNode = app.createNode("net.sf.cimg.CImgExpression", 2, group)
    lastNode.setScriptName("GMICExpr_00")
    lastNode.setLabel("GMICExpr_00")
    lastNode.setPosition(1358, 945)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupGMICExpr_00 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("expression")
    if param is not None:
        param.setValue("")
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.set("Color.RGBA")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "GMICExpr_00"

    # Start of node "GMICExpr_01"
    lastNode = app.createNode("net.sf.cimg.CImgExpression", 2, group)
    lastNode.setScriptName("GMICExpr_01")
    lastNode.setLabel("GMICExpr_01")
    lastNode.setPosition(1551, 945)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupGMICExpr_01 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("expression")
    if param is not None:
        param.setValue("")
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.set("Color.RGBA")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "GMICExpr_01"

    # Start of node "GMICExpr_02"
    lastNode = app.createNode("net.sf.cimg.CImgExpression", 2, group)
    lastNode.setScriptName("GMICExpr_02")
    lastNode.setLabel("GMICExpr_02")
    lastNode.setPosition(1737, 949)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupGMICExpr_02 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("expression")
    if param is not None:
        param.setValue("")
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.set("Color.RGBA")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "GMICExpr_02"

    # Start of node "GMICExpr_03"
    lastNode = app.createNode("net.sf.cimg.CImgExpression", 2, group)
    lastNode.setScriptName("GMICExpr_03")
    lastNode.setLabel("GMICExpr_03")
    lastNode.setPosition(1947, 951)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupGMICExpr_03 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("expression")
    if param is not None:
        param.setValue("")
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.set("Color.RGBA")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "GMICExpr_03"

    # Start of node "GMICExpr_04"
    lastNode = app.createNode("net.sf.cimg.CImgExpression", 2, group)
    lastNode.setScriptName("GMICExpr_04")
    lastNode.setLabel("GMICExpr_04")
    lastNode.setPosition(2175, 951)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupGMICExpr_04 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("expression")
    if param is not None:
        param.setValue("")
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.set("Color.RGBA")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "GMICExpr_04"

    # Start of node "GMICExpr_05"
    lastNode = app.createNode("net.sf.cimg.CImgExpression", 2, group)
    lastNode.setScriptName("GMICExpr_05")
    lastNode.setLabel("GMICExpr_05")
    lastNode.setPosition(2417, 949)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupGMICExpr_05 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("expression")
    if param is not None:
        param.setValue("")
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.set("Color.RGBA")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "GMICExpr_05"

    # Start of node "GMICExpr_06"
    lastNode = app.createNode("net.sf.cimg.CImgExpression", 2, group)
    lastNode.setScriptName("GMICExpr_06")
    lastNode.setLabel("GMICExpr_06")
    lastNode.setPosition(2636, 952)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupGMICExpr_06 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("expression")
    if param is not None:
        param.setValue("")
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.set("Color.RGBA")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "GMICExpr_06"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(1737, 1092)
    lastNode.setSize(104, 66)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("AChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("AChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("OutputChannelsB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle2")
    lastNode.setPosition(1358, 427)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle2 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("0")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("0")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "GMICExpr_07"
    lastNode = app.createNode("net.sf.cimg.CImgExpression", 2, group)
    lastNode.setScriptName("GMICExpr_07")
    lastNode.setLabel("GMICExpr_07")
    lastNode.setPosition(2878, 949)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupGMICExpr_07 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("expression")
    if param is not None:
        param.setValue("")
        del param

    param = lastNode.getParam("Source_channels")
    if param is not None:
        param.set("Color.RGBA")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "GMICExpr_07"

    # Now that all nodes are created we can connect them together, restore expressions
    groupShuffle1.connectInput(1, groupp1)
    groupOutput1.connectInput(0, groupSwitch_remove_channels)
    groupDot1.connectInput(0, groupShuffle1)
    groupShuffle_in_keyable.connectInput(0, groupDot1)
    groupShuffle_in_keyable.connectInput(1, groupDot1)
    groupShuffle3.connectInput(0, groupDot3)
    groupShuffle3.connectInput(1, groupMerge2)
    groupDot3.connectInput(0, groupShuffle_in_keyable)
    groupShuffle_toAlpha.connectInput(1, groupMerge2)
    groupSwitch_remove_channels.connectInput(0, groupSwitch_matte_only)
    groupSwitch_remove_channels.connectInput(1, groupShuffle_Remove)
    groupSwitch_matte_only.connectInput(0, groupMerge1)
    groupSwitch_matte_only.connectInput(1, groupDot4)
    groupShuffle_Remove.connectInput(0, groupSwitch_matte_only)
    groupShuffle_Remove.connectInput(1, groupConstant1)
    groupShuffle_visual_feedback.connectInput(1, groupDot5)
    groupMerge1.connectInput(0, groupMultiply1)
    groupMerge1.connectInput(1, groupShuffle_visual_feedback)
    groupDot4.connectInput(0, groupShuffle_toAlpha)
    groupDot5.connectInput(0, groupShuffle3)
    groupDot6.connectInput(0, groupShuffle2)
    groupDot6_2.connectInput(0, groupDot6)
    groupDot6_2_2.connectInput(0, groupDot6_2)
    groupDot6_2_3.connectInput(0, groupDot6_2_2)
    groupDot6_2_3_2.connectInput(0, groupDot6_2_3)
    groupDot6_2_3_2_2.connectInput(0, groupDot6_2_3_2)
    groupDot6_2_3_2_3.connectInput(0, groupDot6_2_3_2_2)
    groupDot6_2_3_2_3_2.connectInput(0, groupDot6_2_3_2_3)
    groupMultiply1.connectInput(0, groupDot5)
    groupGMICExpr_00.connectInput(0, groupDot6)
    groupGMICExpr_01.connectInput(0, groupDot6_2)
    groupGMICExpr_02.connectInput(0, groupDot6_2_2)
    groupGMICExpr_03.connectInput(0, groupDot6_2_3)
    groupGMICExpr_04.connectInput(0, groupDot6_2_3_2)
    groupGMICExpr_05.connectInput(0, groupDot6_2_3_2_2)
    groupGMICExpr_06.connectInput(0, groupDot6_2_3_2_3)
    groupMerge2.connectInput(0, groupGMICExpr_00)
    groupMerge2.connectInput(1, groupGMICExpr_01)
    groupMerge2.connectInput(3, groupGMICExpr_02)
    groupMerge2.connectInput(4, groupGMICExpr_03)
    groupMerge2.connectInput(5, groupGMICExpr_04)
    groupMerge2.connectInput(6, groupGMICExpr_05)
    groupMerge2.connectInput(7, groupGMICExpr_06)
    groupMerge2.connectInput(8, groupGMICExpr_07)
    groupShuffle2.connectInput(1, groupDot1)
    groupGMICExpr_07.connectInput(0, groupDot6_2_3_2_3_2)

    param = groupShuffle_in_keyable.getParam("outputR")
    param.setExpression("try:\n\treturn thisParam.getOptions().index(\"B.\" + thisGroup.previewChannel.get() + \".B\")\nexcept:\n\treturn thisParam.getOptions().index(\"0\")", True, 0)
    del param
    param = groupShuffle_in_keyable.getParam("outputG")
    param.setExpression("try:\n\treturn thisParam.getOptions().index(\"B.\" + thisGroup.previewChannel.get() + \".G\")\nexcept:\n\treturn thisParam.getOptions().index(\"0\")", True, 0)
    del param
    param = groupShuffle_in_keyable.getParam("outputB")
    param.setExpression("try:\n\treturn thisParam.getOptions().index(\"B.\" + thisGroup.in00.getOptions()[thisGroup.in00.get()] + \".R\")\nexcept:\n\treturn thisParam.getOptions().index(\"0\")", True, 0)
    del param
    param = groupShuffle_in_keyable.getParam("outputA")
    param.setExpression("try:\n\treturn thisParam.getOptions().index(\"B.\" + thisGroup.in00.getOptions()[thisGroup.in00.get()] + \".G\")\nexcept:\n\treturn thisParam.getOptions().index(\"0\")", True, 0)
    del param
    param = groupSwitch_remove_channels.getParam("which")
    param.setExpression("thisGroup.removeChannels.get()", False, 0)
    del param
    param = groupSwitch_matte_only.getParam("which")
    param.setExpression("thisGroup.matteOnly.get()", False, 0)
    del param
    param = groupConstant1.getParam("bottomLeft")
    param.setExpression("thisGroup.getRegionOfDefinition(frame, view).left()", False, 0)
    param.setExpression("thisGroup.getRegionOfDefinition(frame, view).bottom()", False, 1)
    del param
    param = groupConstant1.getParam("size")
    param.setExpression("thisGroup.getRegionOfDefinition(frame, view).width()", False, 0)
    param.setExpression("thisGroup.getRegionOfDefinition(frame, view).height()", False, 1)
    del param
    param = groupGMICExpr_00.getParam("expression")
    param.setExpression("thisGroup.expression.get()", False, 0)
    del param
    param = groupGMICExpr_00.getParam("Source_channels")
    group.getParam("in00").setAsAlias(param)
    del param
    param = groupGMICExpr_00.getParam("disableNode")
    param.setExpression("thisNode.Source_channels.getOptions()[thisNode.Source_channels.get()] in [\"Color.RGBA\", \"None\"]", False, 0)
    del param
    param = groupGMICExpr_01.getParam("expression")
    param.setExpression("thisGroup.expression.get()", False, 0)
    del param
    param = groupGMICExpr_01.getParam("Source_channels")
    group.getParam("in01").setAsAlias(param)
    del param
    param = groupGMICExpr_01.getParam("disableNode")
    param.setExpression("thisNode.Source_channels.getOptions()[thisNode.Source_channels.get()] in [\"Color.RGBA\", \"None\"]", False, 0)
    del param
    param = groupGMICExpr_02.getParam("expression")
    param.setExpression("thisGroup.expression.get()", False, 0)
    del param
    param = groupGMICExpr_02.getParam("Source_channels")
    group.getParam("in02").setAsAlias(param)
    del param
    param = groupGMICExpr_02.getParam("disableNode")
    param.setExpression("thisNode.Source_channels.getOptions()[thisNode.Source_channels.get()] in [\"Color.RGBA\", \"None\"]", False, 0)
    del param
    param = groupGMICExpr_03.getParam("expression")
    param.setExpression("thisGroup.expression.get()", False, 0)
    del param
    param = groupGMICExpr_03.getParam("Source_channels")
    group.getParam("in03").setAsAlias(param)
    del param
    param = groupGMICExpr_03.getParam("disableNode")
    param.setExpression("thisNode.Source_channels.getOptions()[thisNode.Source_channels.get()] in [\"Color.RGBA\", \"None\"]", False, 0)
    del param
    param = groupGMICExpr_04.getParam("expression")
    param.setExpression("thisGroup.expression.get()", False, 0)
    del param
    param = groupGMICExpr_04.getParam("Source_channels")
    group.getParam("in04").setAsAlias(param)
    del param
    param = groupGMICExpr_04.getParam("disableNode")
    param.setExpression("thisNode.Source_channels.getOptions()[thisNode.Source_channels.get()] in [\"Color.RGBA\", \"None\"]", False, 0)
    del param
    param = groupGMICExpr_05.getParam("expression")
    param.setExpression("thisGroup.expression.get()", False, 0)
    del param
    param = groupGMICExpr_05.getParam("Source_channels")
    group.getParam("in05").setAsAlias(param)
    del param
    param = groupGMICExpr_05.getParam("disableNode")
    param.setExpression("thisNode.Source_channels.getOptions()[thisNode.Source_channels.get()] in [\"Color.RGBA\", \"None\"]", False, 0)
    del param
    param = groupGMICExpr_06.getParam("expression")
    param.setExpression("thisGroup.expression.get()", False, 0)
    del param
    param = groupGMICExpr_06.getParam("Source_channels")
    group.getParam("in06").setAsAlias(param)
    del param
    param = groupGMICExpr_06.getParam("disableNode")
    param.setExpression("thisNode.Source_channels.getOptions()[thisNode.Source_channels.get()] in [\"Color.RGBA\", \"None\"]", False, 0)
    del param
    param = groupGMICExpr_07.getParam("expression")
    param.setExpression("thisGroup.expression.get()", False, 0)
    del param
    param = groupGMICExpr_07.getParam("Source_channels")
    group.getParam("in07").setAsAlias(param)
    del param
    param = groupGMICExpr_07.getParam("disableNode")
    param.setExpression("thisNode.Source_channels.getOptions()[thisNode.Source_channels.get()] in [\"Color.RGBA\", \"None\"]", False, 0)
    del param

    try:
        extModule = sys.modules["CryptomatteExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
