--[[
Requires   : Fusion 9.0.1+
Optional   : cjson
Created by : CÃ©dric Duriau         [duriau.cedric@live.be]
             Kristof Indeherberge  [xmnr0x23@gmail.com]
             Andrew Hazelden       [andrew@andrewhazelden.com]
--]]

--[[
# Cryptomatte for Fusion Hotkeys #

## Overview ##
The cryptomatte_hotkeys.fu file is used to add Fusion 9.0.1+ compatible hotkey bindings for Cryptomatte (https://github.com/Psyop/Cryptomatte).
Pressing the "Shift + D" hotkey in the Fusion Viewer window will toggle the active Cryptomatte "Matte Locator" selection state to switch between the "Add" and "Remove" modes.
There are commented out entries present in the hotkey file for Add, Clear, KeyableSurface, LayerMinus, LayerPlus, MatteOnly, Remove, and ViewMode. These hotkeys are commented out at the moment since the final hotkey bindings that will be used for the commands are still being work out by the Cryptomatte developers.

## Installation ##
To use this hotkeys file, place it in the Fusion user prefs "Config:/" folder. Then restart Fusion for the new hotkey entry to become active.
--]]

{
    Action {
        ID = "CryptomatteAdd",
        Category = "Cryptomatte",
        Name = "Cryptomatte Add",
        Targets = {
            Composition = {
                Execute = _Lua [=[
                    fuse = obj:Comp().ActiveTool
                    if fuse then
                        print('[' .. fuse.Name .. '] Add')
                        if fuse:GetID() == 'Fuse.Cryptomatte' then
                            fuse.Add = 1
                        end
                    end
                ]=]
            }
        }
    },
    Action {
        ID = "CryptomatteClear",
        Category = "Cryptomatte",
        Name = "Cryptomatte Clear",
        Targets = {
            Composition = {
                Execute = _Lua [=[
                    fuse = obj:Comp().ActiveTool
                    if fuse then
                        print('[' .. fuse.Name .. '] Clear')
                        if fuse:GetID() == 'Fuse.Cryptomatte' then
                            fuse.Clear = 1
                        end
                    end
                ]=]
            }
        }
    },
    Action {
        ID = "CryptomatteKeyableSurface",
        Category = "Cryptomatte",
        Name = "Cryptomatte Keyable Surface",
        Targets = {
            Composition = {
                Execute = _Lua [=[
                    fuse = obj:Comp().ActiveTool
                    if fuse then
                        print('[' .. fuse.Name .. '] Keyable Surface')
                        if fuse:GetID() == 'Fuse.Cryptomatte' then
                            fuse.KeyableSurface = 1 - fuse.KeyableSurface[fu.TIME_UNDEFINED]
                        end
                    end
                ]=]
            }
        }
    },
    Action {
        ID = "CryptomatteLayerMinus",
        Category = "Cryptomatte",
        Name = "Cryptomatte Layer Minus",
        Targets = {
            Composition = {
                Execute = _Lua [=[
                    fuse = obj:Comp().ActiveTool
                    if fuse then
                        print('[' .. fuse.Name .. '] Layer Minus')
                        if fuse:GetID() == 'Fuse.Cryptomatte' then
                            if fuse.CryptoLayerSlider[fu.TIME_UNDEFINED] ~= 1 then
                                fuse.CryptoLayerSlider = fuse.CryptoLayerSlider[fu.TIME_UNDEFINED] - 1
                            else
                                print('[' .. fuse.Name ..'] Reached First Layer')
                            end
                        end
                    end
                ]=]
            }
        }
    },
    Action {
        ID = "CryptomatteLayerPlus",
        Category = "Cryptomatte",
        Name = "Cryptomatte Layer Plus",
        Targets = {
                Composition = {
                Execute = _Lua [=[
                    fuse = obj:Comp().ActiveTool

                    if fuse then
                        print('[' .. fuse.Name .. '] Layer Plus')
                        if fuse:GetID() == 'Fuse.Cryptomatte' then
                            if fuse.CryptoLayerSlider[fu.TIME_UNDEFINED] ~= fuse.CryptoLayerSlider:GetAttrs("INPN_MaxScale") then
                                fuse.CryptoLayerSlider = fuse.CryptoLayerSlider[fu.TIME_UNDEFINED] + 1
                            else
                                print('[' .. fuse.Name .. '] Reached Last Layer')
                            end
                        end
                    end
                ]=]
            }
        }
    },
    Action {
        ID = "CryptomatteMatteOnly",
        Category = "Cryptomatte",
        Name = "Cryptomatte Matte Only",
        Targets = {
                Composition = {
                Execute = _Lua [=[
                    fuse = obj:Comp().ActiveTool
                    if fuse then
                        print('[' .. fuse.Name .. '] Matte Only')
                        if fuse:GetID() == 'Fuse.Cryptomatte' then
                            fuse.MatteOnly = 1 - fuse.MatteOnly[fu.TIME_UNDEFINED]
                        end
                    end
                ]=]
            }
        }
    },
    Action {
        ID = "CryptomatteRemove",
        Category = "Cryptomatte",
        Name = "Cryptomatte Remove",
        Targets = {
            Composition = {
                Execute = _Lua [=[
                    fuse = obj:Comp().ActiveTool
                    if fuse then
                        print('[' .. fuse.Name .. '] Remove')
                        if fuse:GetID() == 'Fuse.Cryptomatte' then
                            fuse.Remove = 1
                        end
                    end
                ]=]
            }
        }
    },
    Action {
        ID = "CryptomatteToggle",
        Category = "Cryptomatte",
        Name = "Cryptomatte Toggle",
        Targets = {
            Composition = {
                Execute = _Lua [=[
                    fuse = obj:Comp().ActiveTool
                    if fuse then
                        if fuse:GetID() == 'Fuse.Cryptomatte' then
                            print('[' .. fuse.Name .. '] Toggle')
                            fuse.Toggle = 1
                        end
                    end
                ]=]
            }
        }
    },
    Action {
        ID = "CryptomatteViewMode",
        Category = "Cryptomatte",
        Name = "Cryptomatte View Mode",
        Targets = {
                Composition = {
                Execute = _Lua [=[
                    fuse = obj:Comp().ActiveTool
                    if fuse then
                        print('[' .. fuse.Name .. '] View Mode')
                        if fuse:GetID() == 'Fuse.Cryptomatte' then
                            if fuse.ViewMode[fu.TIME_UNDEFINED] ~= 2 then
                                fuse.ViewMode = fuse.ViewMode[fu.TIME_UNDEFINED] + 1
                            else
                                fuse.ViewMode = 0
                            end
                        end
                    end
                ]=]
            }
        }
    },
    Hotkeys {
        Target = "GLView",
        -- SHIFT_A = "CryptomatteAdd{}",
        -- SHIFT_C = "CryptomatteClear{}",
        -- SHIFT_K = "CryptomatteKeyableSurface{}",
        -- SHIFT_KEYPAD_MINUS = "CryptomatteLayerMinus{}",
        -- SHIFT_MINUS = "CryptomatteLayerMinus{}",
        -- SHIFT_KEYPAD_PLUS = "CryptomatteLayerPlus{}",
        -- SHIFT_PLUS = "CryptomatteLayerPlus{}",
        -- SHIFT_M = "CryptomatteMatteOnly{}",
        -- SHIFT_R = "CryptomatteRemove{}",
        SHIFT_D = "CryptomatteToggle{}",
        -- SHIFT_V = "CryptomatteViewMode{}",
        -- SHIFT_CONTROL_K = "CryptomatteViewMode{}",
    }
}
